{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Name it Right!","text":"<p>The current project is here to help You find the best name for Your code entity</p>"},{"location":"common/","title":"Common","text":""},{"location":"common/#1","title":"1.","text":"<p>Avoid shorts. They don't bring any clarity into Your code.</p> <ul> <li>Abreviations     Example: <code>bnfd = 12</code> </li> <li>One-letter variables     Example: `f = 'train'  </li> </ul> <p>Avoid shorts. They don't bring any clarity into Your code.</p> <ul> <li>Abreviations     Example: <code>bnfd = 12</code> </li> <li>One-letter variables     Example: `f = 'train'  </li> </ul>"},{"location":"databases/","title":"General","text":""},{"location":"databases/#tables","title":"Tables","text":""},{"location":"databases/#fields","title":"Fields","text":""},{"location":"python/","title":"General rules","text":"<p>Python is the dynamically typed language, which means, it can give us more possibilities to push different data types to the same variable. Avoid it by any means. Type annotation can help you here a lot.  </p>"},{"location":"python/class_methods/","title":"Class methods","text":""},{"location":"python/class_methods/#glossary","title":"Glossary","text":""},{"location":"python/class_methods/#a","title":"A","text":"add append average authenticate authorize aggregate assign activate archive alert accept attach acquire apply adjust analyze arrange attach associate access"},{"location":"python/classes/","title":"Classes","text":"<p>General patterns</p> <ul> <li>Use CamelCase in the class names  </li> <li>The class represents an object with a complex, encapsulated (or not) functionality. Use nouns to reflect it.</li> </ul> <p>Useful tips</p> <ul> <li>Use a consistent naming convention throughout your code, so it's easy to understand and navigate. If you're    working on a team, agree on a naming convention to use across all your code.</li> <li>Class names should be concise and easy to type, but also descriptive enough to convey their purpose. Avoid    excessively long names that are difficult to read or type. </li> <li>Use mnemonics: If your class name is hard to remember or pronounce, consider using a mnemonic or an acronym    to help people remember it. Just make sure the mnemonic or acronym is easy to understand and related to    the purpose of the class.</li> <li>When choosing a class name, consider the future scalability of your code. Choose a name that can easily    accommodate potential future changes or additions to your code, without requiring a complete rewrite.</li> </ul> <p>General anti-patterns</p> <ul> <li>Avoid using abbreviations in your class names, unless they are commonly understood within your domain.    Abbreviations can be confusing and make your code harder to read.</li> </ul>"},{"location":"python/classes/#naming-examples-by-the-context-or-use-case","title":"Naming examples by the context or use-case","text":""},{"location":"python/classes/#validation","title":"Validation","text":"Validator InputChecker DataVerifier FormValidator ParamValidator RequestValidator ModelValidator SchemaValidator InputValidator VerificationEngine Verifier RuleValidator IntegrityValidator TypeChecker ValueValidator ValidationEngine AssertionValidator ConstraintValidator DataIntegrityChecker FormatValidator"},{"location":"python/functions/","title":"Functions","text":"General patterns <ul> <li>Use snake_case in function names ONLY! Don't look at some bad examples, even if they have 1k+ stars on GitHub  </li> <li>Functions which validate or check something and return boolean value, should start with <code>is_</code>, <code>has_</code>: <code>has_tax_applied()</code>, <code>is_valid()</code> </li> <li>Functions, which are not covered by the above rule, should have executable names: <code>compile()</code>, <code>collect()</code>, <code>process()</code>, <code>fetch()</code> </li> <li>If the function has <code>and</code> in the name, there is a high chance, the function does multiple things. Probably You should split it.  </li> </ul> Useful tips <ul> <li>Good function arguments can help to shorten the function name: <code>add_car_to_catalog(name: str)</code> =&gt; <code>add_car_to(catalog: \"str\")</code> </li> <li>Use the same naming everywhere. Create a vocabulary standard for the company and never break it. If You use <code>fetch_</code>, use it everywhere.  </li> <li>In order to shorten the function name, You can use the module name: <pre><code># Before\nfrom food import create_french_fries\n\ncreate_french_fries()\n...\n\n# After\nfrom food import france\n\nfrance.create_fries()\n...\n\n# Or even shorter\nfrom food.france import create_fries()\n\ncreate_fries()\n...\n</code></pre></li> </ul> General anti-patterns <ul> <li>Abreviations: <code>compile_frst()</code> </li> <li>One-letter functions: <code>v()</code></li> </ul>"},{"location":"python/functions/#glossary","title":"Glossary","text":""},{"location":"python/functions/#a","title":"A","text":"<p>aggregate_something(**building blocks) - function collects all the building blocks' values and generated/aggregate the necessary objects with all the data inside it. Category: Domain Driven Development</p>"},{"location":"python/tests/","title":"Tests","text":""},{"location":"python/tests/#pytest-fixtures","title":"Pytest Fixtures","text":""},{"location":"python/tests/#files","title":"Files","text":"<p>base_entities - the file which stores all the basic fixtures. Example: <code>random_string_generator</code> </p>"},{"location":"python/tests/#fixtures","title":"Fixtures","text":"<ul> <li>Use nouns for the fixtures, returning final objects  </li> <li>Use verbs for the fixtures, returning callables (function callback, class object, etc.)</li> </ul>"},{"location":"python/variables/","title":"Variables","text":"General patterns <ul> <li>Booleans should start with <code>is_</code>, <code>has_</code>: <code>has_completed</code>, <code>is_ready</code></li> <li>Metric units can be included into naming: <code>delay_seconds</code>, <code>velocity_meters</code></li> </ul> General anti-patterns <ul> <li>Abreviations: <code>dstr = 100.12</code> </li> <li>One-letter variables: <code>v = 'comis'</code></li> </ul>"}]}